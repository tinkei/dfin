name: Build, lint, and test dFin

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
    outputs:
      output1: ${{ steps.versionid.outputs.version }}

    steps:
      - uses: actions/checkout@v3
      - name: Fetch tags and commits for setuptools_scm to properly function
        run: |
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip build setuptools setuptools_scm wheel
          pip install pytest ruff flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      # - name: Lint with ruff
      #   run: |
      #     # stop the build if there are Python syntax errors or undefined names
      #     ruff --format=github --select=E9,F63,F7,F82 --target-version=py37 .
      #     # default set of ruff rules with GitHub Annotations
      #     ruff --format=github --target-version=py37 .
      # - name: Lint with flake8
      #   run: |
      #     # stop the build if there are Python syntax errors or undefined names
      #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Build package
        run: |
          python -m build
      - name: Get version # Very ugly hack.
        id: versionid
        run: |
          echo "version=`python -m setuptools_scm`" >> "$GITHUB_OUTPUT"
          echo "`python -m setuptools_scm`"
      - name: Upload built package
        uses: actions/upload-artifact@v3
        with:
          name: dfin-${{ steps.versionid.outputs.version }}-build
          path: |
            dist
      - name: Test with pytest
        run: |
          pip install pytest pytest-cov
          pytest src/dfin --doctest-modules --junitxml=test-results-${{ matrix.python-version }}.xml --cov=src/dfin --cov-report=xml --cov-report=html --ignore=src/dfin/app
      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: |
            test-results-${{ matrix.python-version }}.xml
            coverage.xml
            htmlcov
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
